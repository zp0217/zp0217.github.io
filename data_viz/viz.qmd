---
title: "Data Visualization"
format: html
code-fold: true
---

### packages used
```{r,message = F,warning = F}
#| echo: true
#| code-fold: true
library(readr)
library(dplyr)
library(tidyr)
library(plotly)
library(ggplot2)
library(here)
library(lubridate)
```

## exchange rates


```{=html}
<div class='tableauPlaceholder' id='viz1758825885235' style='position: relative'><noscript><a href='#'><img alt='Dashboard 2 ' src='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;jp&#47;jpy&#47;Dashboard2&#47;1_rss.png' style='border: none' /></a></noscript><object class='tableauViz'  style='display:none;'><param name='host_url' value='https%3A%2F%2Fpublic.tableau.com%2F' /> <param name='embed_code_version' value='3' /> <param name='site_root' value='' /><param name='name' value='jpy&#47;Dashboard2' /><param name='tabs' value='no' /><param name='toolbar' value='yes' /><param name='static_image' value='https:&#47;&#47;public.tableau.com&#47;static&#47;images&#47;jp&#47;jpy&#47;Dashboard2&#47;1.png' /> <param name='animate_transition' value='yes' /><param name='display_static_image' value='yes' /><param name='display_spinner' value='yes' /><param name='display_overlay' value='yes' /><param name='display_count' value='yes' /><param name='language' value='en-US' /></object></div>                <script type='text/javascript'>                    var divElement = document.getElementById('viz1758825885235');                    var vizElement = divElement.getElementsByTagName('object')[0];                    if ( divElement.offsetWidth > 800 ) { vizElement.style.width='1000px';vizElement.style.height='827px';} else if ( divElement.offsetWidth > 500 ) { vizElement.style.width='1000px';vizElement.style.height='827px';} else { vizElement.style.width='100%';vizElement.style.height='927px';}                     var scriptElement = document.createElement('script');                    scriptElement.src = 'https://public.tableau.com/javascripts/api/viz_v1.js';                    vizElement.parentNode.insertBefore(scriptElement, vizElement);                </script>
```



Understanding how major currencies behave relative to the U.S. dollar is a key starting point. The first plot shows the direct exchange rates of the Japanese yen (JPY), the euro (EUR), and the British pound (GBP) against the U.S. dollar. Overall, the three currencies tend to follow broadly similar cycles, reflecting global macroeconomic conditions, though each retains its own distinct story tied to local policy and events.



# FX rate performace

```{r,warning = F,message = F}
#| echo: true
#| code-fold: true

uk = read.csv("../data/fx rate/uk_US.csv")
eu = read.csv("../data/fx rate/EU_US.csv")
jp = read.csv("../data/fx rate/JP_US.csv")
eu_usd <- tibble(date = as.Date(eu$observation_date),
                 value = eu$DEXUSEU, pair = "USD per EUR")
uk_usd <- tibble(date = as.Date(uk$observation_date),
                 value = uk$DEXUSUK, pair = "USD per GBP")
jp_usd <- tibble(date = as.Date(jp$observation_date),
                 value = 1 / jp$DEXJPUS, pair = "USD per JPY")

fx <- bind_rows(eu_usd, uk_usd, jp_usd)

base_date <- fx %>%
  group_by(pair) %>%
  summarise(first_date = min(date, na.rm = TRUE), .groups="drop") %>%
  summarise(start = max(first_date)) %>%
  pull(start)

fx_indexed <- fx %>%
  filter(date >= base_date) %>%
  group_by(pair) %>%
  arrange(date, .by_group = TRUE) %>%
  mutate(base_val = first(value),
         idx100   = value / base_val * 100) %>%
  ungroup()

plot_ly(fx_indexed, x = ~date, y = ~idx100, color = ~pair,
        type = "scatter", mode = "lines") |>
  layout(
    title = paste0("FX Performance (Index = 100 @ ", base_date, ")"),
    xaxis = list(title = "Date",
                 rangeselector = list(
                   buttons = list(
                     list(count=6, step="month", stepmode="backward", label="6M"),
                     list(count=1, step="year",  stepmode="backward", label="1Y"),
                     list(count=3, step="year",  stepmode="backward", label="3Y"),
                     list(step="all", label="All")
                   )
                 ),
                 rangeslider = list(visible=TRUE)),
    yaxis = list(title = "Index (start=100)")
  )


```


To make comparisons clearer across currencies with different absolute values, the second plot re-expresses these series as performance indices, with all currencies set to a base of 100 at the start of 2000. From this common starting point, differences in long-term trends become visible. The euro shows strong early gains, peaking just before the global financial crisis, then retreating through the eurozone debt crisis before settling into a choppier range. Sterling reveals the steepest long-term decline, marked by sharp losses during the 2008 financial crisis and again following the 2016 Brexit referendum, with a new low around 2022 before some stabilization. The yen, meanwhile, strengthens sharply during risk-off episodes like 2008–09, but then weakens through the Abenomics and yield-curve-control period, sliding further into 2023–24 before a modest recovery. These divergences highlight how global shocks and country-specific policy choices—such as the GFC, the eurozone debt crisis, Brexit, and Japan’s monetary regime—shape both absolute exchange rates and relative performance over time.


### Effective exchange rate 
```{r,warning = F,message = F}
#| echo: true
#| code-fold: true

japan <- read_csv(here("data/bis/bis_japan.csv"), skip = 3) %>%
  select(Date = `TIME_PERIOD:Period`, Japan = `OBS_VALUE:Value`)

us <- read_csv(here("data/bis/bis_us.csv"), skip = 3) %>%
  select(Date = `TIME_PERIOD:Period`, US = `OBS_VALUE:Value`)

uk <- read_csv(here("data/bis/bis_uk.csv"), skip = 3) %>%
  select(Date = `TIME_PERIOD:Period`, UK = `OBS_VALUE:Value`)

euro <- read_csv(here("data/bis/bis_euro.csv"), skip = 3) %>%
  select(Date = `TIME_PERIOD:Period`, Euro = `OBS_VALUE:Value`)

df <- japan %>%
  inner_join(us, by = "Date") %>%
  inner_join(uk, by = "Date") %>%
  inner_join(euro, by = "Date")

df <- df %>% mutate(Date = as.Date(Date))

ggplot(df, aes(x = Date)) +
  geom_line(aes(y = Japan, color = "Japan")) +
  geom_line(aes(y = US, color = "US")) +
  geom_line(aes(y = UK, color = "UK")) +
  geom_line(aes(y = Euro, color = "Euro")) +
  labs(title = "BIS Real Effective Exchange Rates (Index 2020=100)",
       x = "Date", y = "Index Value",
       color = "Country/Region") +
  theme_minimal()

```



The real effective exchange rate (REER) looks past simple dollar comparisons by adjusting for inflation and trade weights, offering a clearer picture of each currency’s competitiveness. In this view, slower-moving structural shifts become more apparent: the euro’s early strength and subsequent decline during the sovereign debt crisis, the yen’s prolonged undervaluation through years of ultra-loose policy, and sterling’s steady erosion around Brexit and the 2022 energy shock. A REER reading below the 2020 base value of 100 signals a cheaper, more competitive currency, while values above 100 point to relative overvaluation. Unlike the indexed FX plot, which highlights short-term swings against the dollar, the REER emphasizes deeper, long-run changes in purchasing power and trade balance dynamics.



### data cleaning for yield curves and code for plots
```{r,warning = F,message = F}
#| echo: true
#| code-fold: true
#| results: "hide"
#| fig-show: "hide"

japan   <- read.csv(here("data/yield", "yield_curve_japan.csv"))
us_2y   <- read.csv(here("data/yield", "yield_curve_2_us.csv"))
us_10y  <- read.csv(here("data/yield", "yield_curve_10_us.csv"))
euro_2y <- read.csv(here("data/yield", "yield_curve_euro_2.csv"))
euro_10y<- read.csv(here("data/yield", "yield_curve_euro_10.csv"))
uk      <- read.csv(here("data/yield", "yield_curve_uk.csv"))

clean_numeric <- function(x) {
  as.numeric(ifelse(x %in% c("-", "", "NA"), NA, x))
}

japan_clean <- japan %>%
  select(Date = 1, JP_2Y = 3, JP_10Y = 10) %>%
  mutate(
    Date  = suppressWarnings(parse_date_time(Date, orders = c("Ymd", "Y/m/d", "Y-m-d"))),
    JP_2Y = clean_numeric(JP_2Y),
    JP_10Y = clean_numeric(JP_10Y)
  ) %>%
  filter(!is.na(Date))   

us_clean <- us_2y %>%
  select(Date = 1, US_2Y = 2) %>%
  left_join(us_10y %>% select(Date = 1, US_10Y = 2), by = "Date") %>%
  mutate(
    Date   = ymd(Date),
    US_2Y  = clean_numeric(US_2Y),
    US_10Y = clean_numeric(US_10Y)
  )

euro_clean <- euro_2y %>%
  select(Date = 1, EU_2Y = ncol(euro_2y)) %>%
  left_join(
    euro_10y %>% select(Date = 1, EU_10Y = ncol(euro_10y)),
    by = "Date"
  ) %>%
  mutate(
    Date   = ymd(Date),
    EU_2Y  = clean_numeric(EU_2Y),
    EU_10Y = clean_numeric(EU_10Y)
  )

uk_clean <- uk %>%
  select(Date = 1, UK_2Y = 2, UK_10Y = 3) %>%
  mutate(
    Date   = ymd(Date),
    UK_2Y  = clean_numeric(UK_2Y),
    UK_10Y = clean_numeric(UK_10Y)
  )

merged <- japan_clean %>%
  full_join(us_clean, by = "Date") %>%
  full_join(euro_clean, by = "Date") %>%
  full_join(uk_clean, by = "Date") %>%
  arrange(Date)

merged <- merged %>%
  mutate(
    JP_Spread  = JP_10Y  - JP_2Y,
    US_Spread  = US_10Y - US_2Y,
    EU_Spread  = EU_10Y - EU_2Y,
    UK_Spread  = UK_10Y - UK_2Y
  )
start_dates <- merged %>%
  summarise(
    JP_start = min(Date[!is.na(JP_Spread)]),
    US_start = min(Date[!is.na(US_Spread)]),
    EU_start = min(Date[!is.na(EU_Spread)]),
    UK_start = min(Date[!is.na(UK_Spread)])
  )

common_start <- max(start_dates$JP_start,
                    start_dates$US_start,
                    start_dates$EU_start,
                    start_dates$UK_start)

aligned <- merged %>% filter(Date >= common_start)

jp_curve <- plot_ly(merged, x = ~Date, y = ~JP_2Y,
                    type = 'scatter', mode = 'lines', name = "Japan 2Y") %>%
  add_lines(y = ~JP_10Y, name = "Japan 10Y") %>%
  layout(title = "Japan Yield Curve (2Y & 10Y)",
         xaxis = list(title = "Date"),
         yaxis = list(title = "Yield (%)"))

us_curve <- plot_ly(merged, x = ~Date, y = ~US_2Y,
                    type = 'scatter', mode = 'lines', name = "US 2Y") %>%
  add_lines(y = ~US_10Y, name = "US 10Y") %>%
  layout(title = "US Yield Curve (2Y & 10Y)",
         xaxis = list(title = "Date"),
         yaxis = list(title = "Yield (%)"))

eu_curve <- plot_ly(merged, x = ~Date, y = ~EU_2Y,
                    type = 'scatter', mode = 'lines', name = "Euro 2Y") %>%
  add_lines(y = ~EU_10Y, name = "Euro 10Y") %>%
  layout(title = "Euro Area Yield Curve (2Y & 10Y)",
         xaxis = list(title = "Date"),
         yaxis = list(title = "Yield (%)"))

uk_curve <- plot_ly(merged, x = ~Date, y = ~UK_2Y,
                    type = 'scatter', mode = 'lines', name = "UK 2Y") %>%
  add_lines(y = ~UK_10Y, name = "UK 10Y") %>%
  layout(title = "UK Yield Curve (2Y & 10Y)",
         xaxis = list(title = "Date"),
         yaxis = list(title = "Yield (%)"))

jp_curve
us_curve
eu_curve
uk_curve
```




## yield curve for four countries

::: panel-tabset

### japan yield curve

```{r}
jp_curve
```

### US yield curve

```{r}
us_curve
```

### euro yield curve

```{r}
eu_curve 
```

### uk yield curve

```{r}
uk_curve
```
:::


The yield curve plots for Japan, the U.S., the euro area, and the U.K. reveal how each economy experienced the global tightening cycle in its own way. In Japan, the 2Y and 10Y yields were held near zero for years under negative rates and yield curve control, leaving the curve unnaturally flat until 2023–24, when the BoJ began loosening its grip and long-term yields finally adjusted upward. In the U.S., rapid Fed hikes in 2022–23 drove the 2Y sharply higher, while the 10Y lagged, producing one of the deepest inversions in decades before signs of steepening emerged as growth expectations stabilized. The euro area saw the ECB raise rates later, with 2Y yields jumping in response, while the 10Y stayed more restrained due to weak growth prospects and sovereign debt sensitivities. In the U.K., yields reflected both high inflation and fiscal credibility: the 2Y surged with persistent inflation, while the 10Y showed episodes of market stress, most dramatically during the 2022 “mini-budget” crisis. Viewed together, these curves capture the common theme of inflation-driven tightening but also the distinct vulnerabilities and policy legacies shaping each market.


## spreads for four countries

```{r}
#| echo: true
#| code-fold: true


jp_plot <- plot_ly(aligned, x = ~Date, y = ~JP_Spread, type = 'scatter', mode = 'lines',
                   name = "Japan (10Y-2Y)") %>%
  layout(title = "Japan Yield Curve Spread (10Y-2Y)",
         xaxis = list(title = "Date"),
         yaxis = list(title = "Spread (%)"))

us_plot <- plot_ly(aligned, x = ~Date, y = ~US_Spread, type = 'scatter', mode = 'lines',
                   name = "US (10Y-2Y)") %>%
  layout(title = "US Yield Curve Spread (10Y-2Y)",
         xaxis = list(title = "Date"),
         yaxis = list(title = "Spread (%)"))

eu_plot <- plot_ly(aligned, x = ~Date, y = ~EU_Spread, type = 'scatter', mode = 'lines',
                   name = "Euro (10Y-2Y)") %>%
  layout(title = "Euro Yield Curve Spread (10Y-2Y)",
         xaxis = list(title = "Date"),
         yaxis = list(title = "Spread (%)"))

uk_plot <- plot_ly(aligned, x = ~Date, y = ~UK_Spread, type = 'scatter', mode = 'lines',
                   name = "UK (10Y-2Y)") %>%
  layout(title = "UK Yield Curve Spread (10Y-2Y)",
         xaxis = list(title = "Date"),
         yaxis = list(title = "Spread (%)"))

combined_plot <- plot_ly(aligned, x = ~Date) %>%
  add_lines(y = ~JP_Spread, name = "Japan (10Y-2Y)") %>%
  add_lines(y = ~US_Spread, name = "US (10Y-2Y)") %>%
  add_lines(y = ~EU_Spread, name = "Euro (10Y-2Y)") %>%
  add_lines(y = ~UK_Spread, name = "UK (10Y-2Y)") %>%
  layout(title = "Yield Curve Spreads(10 years vs 2 years) Over Time",
         xaxis = list(title = "Date"),
         yaxis = list(title = "Spread (%)"))

combined_plot

```

to the extent from government bond yield curve, this plot is a spread graph for 10years vs 2 years. 
The yield curve spread — the gap between long-term (10Y) and short-term (2Y) bond yields — condenses the full yield curve into a single, easy-to-read signal. Normally, the 10Y sits above the 2Y because investors demand compensation for lending further into the future. When the spread narrows or turns negative, it reflects either central banks driving short rates sharply higher or markets anticipating weaker growth ahead. For this reason, the 10Y–2Y spread is one of the most closely followed indicators of the business cycle.

Linking back to the previous yield plots, the spread highlights in one line what was visible across four separate curves. In the U.S., rapid Fed hikes lifted 2Y yields above 10Y yields, creating a deep inversion in 2022–23 that matched the flattening shown in the U.S. yield curve panel. In the euro area, a later and milder tightening cycle kept inversions shallower, consistent with the weaker 10Y response seen earlier. In the U.K., spreads swung more violently, echoing the gilt turmoil of the 2022 mini-budget and the inflation-driven spikes visible in both ends of the curve. Meanwhile, Japan remained flat for decades under yield curve control, and only after 2023 did its spread widen modestly as the BoJ began dismantling its policy framework.

By compressing the story of the individual yield curves, the spread plot makes it easier to compare cycles across countries. It shows not only where each economy sits in the global tightening narrative, but also how quickly — or slowly — their policies allow the curve to invert and recover.

### data cleaning & plot code for oil price,sp500 price, bitcoin price

```{r,warning = F, message = F}
#| echo: true
#| code-fold: true
#| results: "hide"
#| fig-show: "hide"

# oil price 
oil_price <- read_csv(here("data/oil", "crude_oil.csv"))%>%
  rename(Date = observation_date, WTI = DCOILWTICO) %>%
  mutate(Date = as.Date(Date),
         WTI = as.numeric(WTI))

oil_vix <- read_csv(here("data/oil","oil_vix.csv"),
                    col_names = c("Date", "OILVIX"),
                    skip = 1) %>%
  mutate(Date = as.Date(Date),
         OILVIX = as.numeric(OILVIX))


oil_merged <- inner_join(oil_price, oil_vix, by = "Date")

oil_plot <- plot_ly(oil_merged, x = ~Date) %>%
  add_lines(y = ~WTI, name = "WTI Crude oil(USD)", line = list(color = "green")) %>%
  add_lines(y = ~OILVIX, name = "Crude oil VIX", yaxis = "y2", line = list(color = "red")) %>%
  layout(
    title = "WTI Crude Oil vs OIL VIX",
    yaxis = list(title = "WTI Price (USD)", side = "left"),
    yaxis2 = list(title = "OIL VIX", overlaying = "y", side = "right"),
    legend = list(x = 0.1, y = 0.7)
  )




# bitcoin price

btc <- read_csv(
  here("data/btc", "btc.csv"),
  skip = 2,
  col_names = c("Date","Open","High","Low","Close","AdjClose","Volume"),
  col_types = cols(
    Date = col_date(format = "%Y-%m-%d"),
    Open = col_double(),
    High = col_double(),
    Low = col_double(),
    Close = col_double(),
    AdjClose = col_double(),
    Volume = col_double()
  )
)


btc_vol <- read_csv(here("data/btc","btcvol.csv")) %>%
  mutate(date = as.Date(date))


btc_all <- inner_join(
  btc %>% select(Date, Close, Volume),
  btc_vol %>% select(date, price, volatility, volatility60),
  by = c("Date" = "date")
)


btc_plot <- plot_ly(btc_all, x = ~Date) %>%
  add_lines(y = ~price, name = "BTC Price (USD)", line = list(color = "gold"), yaxis = "y1") %>%
  add_lines(y = ~volatility, name = "Daily Volatility", line = list(color = "red", width = 1), yaxis = "y2") %>%
  add_lines(y = ~volatility60, name = "60-day Volatility", line = list(color = "darksalmon", width = 2), yaxis = "y2") %>%
  layout(
    title = "Bitcoin Price vs Volatility (Daily & 60-day)",
    yaxis = list(title = "BTC Price (USD)", type = "log"), 
    yaxis2 = list(title = "Volatility", overlaying = "y", side = "right"),
    legend = list(x = 0.1, y = 0.9)
  )



# S&P 500 price

sp500 <- read_csv(
  here("data/sp500","sp500.csv"),
  skip = 1,
  col_names = c("Date","Open","High","Low","Close","AdjClose","Volume"),
) %>% slice(-1,-2)%>%
  mutate(Date = as.Date(Date))


sp500_vix <- read_csv(
  here("data/sp500","sp500_vix.csv")
) %>%
  mutate(Date = as.Date(DATE, format = "%m/%d/%Y")) %>%
  select(Date, VVIX)

sp500_all <- inner_join(
  sp500 %>% select(Date, Close),
  sp500_vix,
  by = "Date"
)


sp_plot <- plot_ly(sp500_all, x = ~Date) %>%
  add_lines(y = ~Close, 
            name = "S&P500 Index", 
            line = list(color = "blue"), 
            yaxis = "y1") %>%
  add_lines(y = ~VVIX, 
            name = "VVIX", 
            line = list(color = "red"), 
            yaxis = "y2") %>%
  layout(
    title = "S&P500 Index vs VVIX",
    yaxis = list(title = "S&P500 Index", type = "log"),   
    yaxis2 = list(title = "VVIX", overlaying = "y", side = "right"),
    legend = list(x = 0.1, y = 0.9)
  )


```

```{r}
write_csv(btc,"btc_cleaned.csv")
write_csv(sp500,"sp500_cleaned.csv")
write_csv(oil_price,"oil_cleaned.csv")
```

::: panel-tabset

### oil price & volatility
```{r}
oil_plot
```

### btc price & volatility
```{r}
btc_plot
```

### S&P500 price & volatility
```{r}
sp_plot
```

:::


Oil prices and volatility (OILVIX) capture the most direct link between geopolitics, supply shocks, and inflation. Spikes in both price and volatility — such as during the 2022 energy shock following Russia’s invasion of Ukraine — fed directly into the inflation pressures that drove central banks to tighten policy, which we saw earlier in the steep climbs of 2Y yields. When oil trends higher with calmer volatility, it signals demand-led growth rather than supply stress, tying back to the more reflationary phases of the yield curves.

The S&P 500 vs. VVIX reflects how equity markets absorb those same cycles. Periods of rising policy rates and yield-curve inversions often coincide with weaker equity performance and elevated volatility-of-volatility, as investors hedge against uncertainty. Conversely, when the curve begins to steepen again — signaling expectations of easing — equities tend to recover and VVIX subsides. This makes equities a natural “mirror” to the fixed-income story told in the spread plot.

Finally, Bitcoin and its volatility offer a high-beta, speculative lens on the same macro environment. Crypto tends to rally during periods of abundant liquidity and risk-on sentiment, but volatility spikes sharply around regime shifts, such as the 2024 halving event. Its behavior often amplifies what is seen in equities: confidence during easing cycles, stress during tightening phases.

Together, these three panels illustrate how macro forces traced through FX and yields cascade into commodities, equities, and crypto. Oil shapes inflation and policy responses, equities reflect growth expectations and investor sentiment, and Bitcoin amplifies the extremes of risk appetite. Read alongside the earlier plots, they complete the picture of how global shocks ripple across every corner of the financial system.
