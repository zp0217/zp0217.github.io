tickvals = as.Date(c("2010-01-01","2015-01-01","2020-01-01","2025-01-01")),
tickformat = "%Y",
yaxis = "JPY"
)
)
jp = read.csv("../data/fx rate/JP_US.csv")
jp$observation_date <- as.Date(jp$observation_date)
plot_ly(jp, x = ~observation_date, y = ~DEXJPUS, type = "scatter", mode = "lines") |>
layout(
title = "JPY vs USD Exchange Rate",
xaxis = list(
xaxis = "Year",
tickvals = as.Date(c("2010-01-01","2015-01-01","2020-01-01","2025-01-01")),
tickformat = "%Y"
),
yaxis = list(title = "JPY(JPY per 1 USD")
)
jp = read.csv("../data/fx rate/JP_US.csv")
jp$observation_date <- as.Date(jp$observation_date)
plot_ly(jp, x = ~observation_date, y = ~DEXJPUS, type = "scatter", mode = "lines") |>
layout(
title = "JPY vs USD Exchange Rate",
xaxis = list(
xaxis = "Year",
tickvals = as.Date(c("2010-01-01","2015-01-01","2020-01-01","2025-01-01")),
tickformat = "%Y"
),
yaxis = list(title = "JPY(JPY per 1 USD)")
)
uk = read.csv("../data/fx rate/uk_US.csv")
uk$observation_date <- as.Date(jp$observation_date)
plot_ly(uk, x = ~observation_date, y = ~DEXJPUS, type = "scatter", mode = "lines") |>
layout(
title = "GBP vs USD Exchange Rate",
xaxis = list(
xaxis = "Year",
tickvals = as.Date(c("2010-01-01","2015-01-01","2020-01-01","2025-01-01")),
tickformat = "%Y"
),
yaxis = list(title = "GBP(GBP per 1 USD)")
)
View(jp)
View(uk)
View(uk)
uk = read.csv("../data/fx rate/uk_US.csv")
uk$observation_date <- as.Date(jp$observation_date)
plot_ly(uk, x = ~observation_date, y = ~DEXUSUK, type = "scatter", mode = "lines") |>
layout(
title = "GBP vs USD Exchange Rate",
xaxis = list(
xaxis = "Year",
tickvals = as.Date(c("2010-01-01","2015-01-01","2020-01-01","2025-01-01")),
tickformat = "%Y"
),
yaxis = list(title = "GBP(GBP per 1 USD)")
)
eu = read.csv("../data/fx rate/EU_US.csv")
eu$observation_date <- as.Date(eu$observation_date)
plot_ly(uk, x = ~observation_date, y = ~DEXUSEU, type = "scatter", mode = "lines") |>
layout(
title = "GBP vs USD Exchange Rate",
xaxis = list(
xaxis = "Year",
tickvals = as.Date(c("2010-01-01","2015-01-01","2020-01-01","2025-01-01")),
tickformat = "%Y"
),
yaxis = list(title = "GBP(GBP per 1 USD)")
)
View(jp)
eu = read.csv("../data/fx rate/EU_US.csv")
eu$observation_date <- as.Date(eu$observation_date)
plot_ly(uk, x = ~observation_date, y = ~DEXEUUS, type = "scatter", mode = "lines") |>
layout(
title = "GBP vs USD Exchange Rate",
xaxis = list(
xaxis = "Year",
tickvals = as.Date(c("2010-01-01","2015-01-01","2020-01-01","2025-01-01")),
tickformat = "%Y"
),
yaxis = list(title = "GBP(GBP per 1 USD)")
)
View(eu)
eu = read.csv("../data/fx rate/EU_US.csv")
eu$observation_date <- as.Date(eu$observation_date)
plot_ly(uk, x = ~observation_date, y = ~DEXUSEU, type = "scatter", mode = "lines") |>
layout(
title = "GBP vs USD Exchange Rate",
xaxis = list(
xaxis = "Year",
tickvals = as.Date(c("2010-01-01","2015-01-01","2020-01-01","2025-01-01")),
tickformat = "%Y"
),
yaxis = list(title = "GBP(GBP per 1 USD)")
)
View(eu)
eu = read.csv("../data/fx rate/EU_US.csv")
eu$observation_date <- as.Date(eu$observation_date)
plot_ly(eu, x = ~observation_date, y = ~DEXUSEU, type = "scatter", mode = "lines") |>
layout(
title = "EUR vs USD Exchange Rate",
xaxis = list(
xaxis = "Year",
tickvals = as.Date(c("2010-01-01","2015-01-01","2020-01-01","2025-01-01")),
tickformat = "%Y"
),
yaxis = list(title = "GBP(GBP per 1 USD)")
)
jp = read.csv("../data/fx rate/JP_US.csv")
jp$observation_date <- as.Date(jp$observation_date)
jp$USD_per_JPY <- 1 / jp$DEXJPUS
plot_ly(jp, x = ~observation_date, y = ~DEXJPUS, type = "scatter", mode = "lines") |>
layout(
title = "JPY vs USD Exchange Rate",
xaxis = list(
xaxis = "Year",
tickvals = as.Date(c("2010-01-01","2015-01-01","2020-01-01","2025-01-01")),
tickformat = "%Y"
),
yaxis = list(title = "JPY(JPY per 1 USD)")
)
View(jp)
uk = read.csv("../data/fx rate/uk_US.csv")
uk$observation_date <- as.Date(jp$observation_date)
uk = read.csv("../data/fx rate/uk_US.csv")
uk$observation_date <- as.Date(ㅕㅏ$observation_date)
uk = read.csv("../data/fx rate/uk_US.csv")
uk$observation_date <- as.Date(uk$observation_date)
plot_ly(uk, x = ~observation_date, y = ~DEXUSUK, type = "scatter", mode = "lines") |>
layout(
title = "GBP vs USD Exchange Rate",
xaxis = list(
xaxis = "Year",
tickvals = as.Date(c("2010-01-01","2015-01-01","2020-01-01","2025-01-01")),
tickformat = "%Y"
),
yaxis = list(title = "GBP(GBP per 1 USD)")
)
eu = read.csv("../data/fx rate/EU_US.csv")
eu$observation_date <- as.Date(eu$observation_date)
plot_ly(eu, x = ~observation_date, y = ~DEXUSEU, type = "scatter", mode = "lines") |>
layout(
title = "EUR vs USD Exchange Rate",
xaxis = list(
xaxis = "Year",
tickvals = as.Date(c("2010-01-01","2015-01-01","2020-01-01","2025-01-01")),
tickformat = "%Y"
),
yaxis = list(title = "EUR(EUR per 1 USD)")
)
jp = read.csv("../data/fx rate/JP_US.csv")
jp$observation_date <- as.Date(jp$observation_date)
jp$USD_per_JPY <- 1 / jp$DEXJPUS
plot_ly(jp, x = ~observation_date, y = ~DEXJPUS, type = "scatter", mode = "lines") |>
layout(
title = "JPY vs USD Exchange Rate",
xaxis = list(
xaxis = "Year",
tickvals = as.Date(c("2010-01-01","2015-01-01","2020-01-01","2025-01-01")),
tickformat = "%Y"
),
yaxis = list(title = "JPY(JPY per 1 USD)")
)
View(jp)
jp = read.csv("../data/fx rate/JP_US.csv")
jp$observation_date <- as.Date(jp$observation_date)
jp$USD_per_JPY <- 1 / jp$DEXJPUS
plot_ly(jp, x = ~observation_date, y = ~USD_per_JPY, type = "scatter", mode = "lines") |>
layout(
title = "JPY vs USD Exchange Rate",
xaxis = list(
xaxis = "Year",
tickvals = as.Date(c("2010-01-01","2015-01-01","2020-01-01","2025-01-01")),
tickformat = "%Y"
),
yaxis = list(title = "JPY(JPY per 1 USD)")
)
library(readr)
library(dplyr)
library(plotly)
eu_usd <- tibble(
date  = as.Date(eu$observation_date),
value = eu$DEXUSEU,                  # 그대로: USD per EUR
pair  = "USD per EUR"
)
uk_usd <- tibble(
date  = as.Date(uk$observation_date),
value = uk$DEXUSUK,                  # 그대로: USD per GBP
pair  = "USD per GBP"
)
jp_usd <- tibble(
date  = as.Date(jp$observation_date),
value = 1 / jp$DEXJPUS,              # 역수: USD per JPY
pair  = "USD per JPY"
)
# 합치기
fx <- bind_rows(eu_usd, uk_usd, jp_usd)
# 플롯
plot_ly(fx, x = ~date, y = ~value, color = ~pair,
type = "scatter", mode = "lines") |>
layout(
title = "FX Comparison (USD per EUR, USD per GBP, USD per JPY)",
xaxis = list(title = "Date"),
yaxis = list(title = "USD per 1 unit of foreign currency"),
legend = list(orientation = "h", y = -0.2)
)
library(readr)
library(dplyr)
library(plotly)
eu_usd <- tibble(date = as.Date(eu$observation_date),
value = eu$DEXUSEU, pair = "USD per EUR")
uk_usd <- tibble(date = as.Date(uk$observation_date),
value = uk$DEXUSUK, pair = "USD per GBP")
jp_usd <- tibble(date = as.Date(jp$observation_date),
value = 1 / jp$DEXJPUS, pair = "USD per JPY")
fx <- bind_rows(eu_usd, uk_usd, jp_usd)
base_date <- fx %>%
group_by(pair) %>%
summarise(first_date = min(date, na.rm = TRUE), .groups="drop") %>%
summarise(start = max(first_date)) %>%
pull(start)
fx_indexed <- fx %>%
filter(date >= base_date) %>%
group_by(pair) %>%
arrange(date, .by_group = TRUE) %>%
mutate(base_val = first(value),
idx100   = value / base_val * 100) %>%
ungroup()
plot_ly(fx_indexed, x = ~date, y = ~idx100, color = ~pair,
type = "scatter", mode = "lines") |>
layout(
title = paste0("FX Performance (Index = 100 @ ", base_date, ")"),
xaxis = list(title = "Date",
rangeselector = list(
buttons = list(
list(count=6, step="month", stepmode="backward", label="6M"),
list(count=1, step="year",  stepmode="backward", label="1Y"),
list(count=3, step="year",  stepmode="backward", label="3Y"),
list(step="all", label="All")
)
),
rangeslider = list(visible=TRUE)),
yaxis = list(title = "Index (start=100)")
)
library(readr)
library(dplyr)
library(tidyr)
library(plotly)
files <- c("UK:US" = "../data/fx rate/UK_US.csv",
"EU:US" = "../data/fx rate/EU_US.csv",
"JP:US" = "../data/fx rate/JP_US.csv")
long <- lapply(names(files), function(nm) {
d <- read_csv(files[[nm]])
d[[1]] <- as.Date(d[[1]])
tibble(date = d[[1]], value = as.numeric(d[[2]]), pair = nm)
}) |> bind_rows()
indexed <- long |>
group_by(pair) |>
arrange(date, .by_group = TRUE) |>
mutate(index100 = value / first(na.omit(value)) * 100)
plot_ly(indexed, x = ~date, y = ~index100, color = ~pair,
type = "scatter", mode = "lines") |>
layout(title = "FX (Indexed to 100 at start)",
yaxis = list(title = "Index (start = 100)"))
uk = read.csv("../data/fx rate/uk_US.csv")
uk$observation_date <- as.Date(uk$observation_date)
plot_ly(uk, x = ~observation_date, y = ~DEXUSUK, type = "scatter", mode = "lines") |>
layout(
title = "GBP vs USD Exchange Rate",
xaxis = list(
xaxis = "Year",
tickvals = as.Date(c("2010-01-01","2015-01-01","2020-01-01","2025-01-01")),
tickformat = "%Y"
),
yaxis = list(title = "GBP(GBP per 1 USD)")
)
eu = read.csv("../data/fx rate/EU_US.csv")
eu$observation_date <- as.Date(eu$observation_date)
plot_ly(eu, x = ~observation_date, y = ~DEXUSEU, type = "scatter", mode = "lines") |>
layout(
title = "EUR vs USD Exchange Rate",
xaxis = list(
xaxis = "Year",
tickvals = as.Date(c("2010-01-01","2015-01-01","2020-01-01","2025-01-01")),
tickformat = "%Y"
),
yaxis = list(title = "EUR(EUR per 1 USD)")
)
jp = read.csv("../data/fx rate/JP_US.csv")
jp$observation_date <- as.Date(jp$observation_date)
jp$USD_per_JPY <- 1 / jp$DEXJPUS
plot_ly(jp, x = ~observation_date, y = ~USD_per_JPY, type = "scatter", mode = "lines") |>
layout(
title = "JPY vs USD Exchange Rate",
xaxis = list(
xaxis = "Year",
tickvals = as.Date(c("2010-01-01","2015-01-01","2020-01-01","2025-01-01")),
tickformat = "%Y"
),
yaxis = list(title = "JPY(JPY per 1 USD)")
)
library(readr)
library(dplyr)
library(tidyr)
library(plotly)
files <- c("UK:US" = "../data/fx rate/UK_US.csv",
"EU:US" = "../data/fx rate/EU_US.csv",
"JP:US" = "../data/fx rate/JP_US.csv")
long <- lapply(names(files), function(nm) {
d <- read_csv(files[[nm]])
d[[1]] <- as.Date(d[[1]])
tibble(date = d[[1]], value = as.numeric(d[[2]]), pair = nm)
}) |> bind_rows()
indexed <- long |>
group_by(pair) |>
arrange(date, .by_group = TRUE) |>
mutate(index100 = value / first(na.omit(value)) * 100)
plot_ly(indexed, x = ~date, y = ~index100, color = ~pair,
type = "scatter", mode = "lines") |>
layout(title = "FX (Indexed to 100 at start)",
yaxis = list(title = "Index (start = 100)"))
library(readr)
library(dplyr)
library(plotly)
eu_usd <- tibble(date = as.Date(eu$observation_date),
value = eu$DEXUSEU, pair = "USD per EUR")
uk_usd <- tibble(date = as.Date(uk$observation_date),
value = uk$DEXUSUK, pair = "USD per GBP")
jp_usd <- tibble(date = as.Date(jp$observation_date),
value = 1 / jp$DEXJPUS, pair = "USD per JPY")
fx <- bind_rows(eu_usd, uk_usd, jp_usd)
base_date <- fx %>%
group_by(pair) %>%
summarise(first_date = min(date, na.rm = TRUE), .groups="drop") %>%
summarise(start = max(first_date)) %>%
pull(start)
fx_indexed <- fx %>%
filter(date >= base_date) %>%
group_by(pair) %>%
arrange(date, .by_group = TRUE) %>%
mutate(base_val = first(value),
idx100   = value / base_val * 100) %>%
ungroup()
plot_ly(fx_indexed, x = ~date, y = ~idx100, color = ~pair,
type = "scatter", mode = "lines") |>
layout(
title = paste0("FX Performance (Index = 100 @ ", base_date, ")"),
xaxis = list(title = "Date",
rangeselector = list(
buttons = list(
list(count=6, step="month", stepmode="backward", label="6M"),
list(count=1, step="year",  stepmode="backward", label="1Y"),
list(count=3, step="year",  stepmode="backward", label="3Y"),
list(step="all", label="All")
)
),
rangeslider = list(visible=TRUE)),
yaxis = list(title = "Index (start=100)")
)
pwd
cd
write_csv(jp."/Users/zp0217.github.io/data/jpy.csv")
write_csv(jp,"/Users/zp0217.github.io/data/jpy.csv")
write_csv(jp,"Users/zp0217.github.io/data/jpy.csv")
getwd()
write_csv(jp,"zp0217.github.io/data/jpy.csv")
write_csv(jp,"/zp0217.github.io/data/jpy.csv")
write_csv(jp,"/zp0217.github.io/data/jpy.csv")
cd zp0217.github.io
setwd("~/zp0217.github.io")
pwd
getwd()
write_csv(jp,"data/jpy.csv")
write_csv(jp,"/data/jpy.csv")
write.csv(jp,"/data/jpy.csv")
write_csv(jp,"/data/jpy.csv")
write_csv(jp,"jpy.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(forecast)
library(astsa)
library(xts)
library(tseries)
library(fpp2)
library(fma)
library(lubridate)
library(tidyverse)
library(TSstudio)
library(quantmod)
library(tidyquant)
library(plotly)
library(ggplot2)
library(dplyr)
pwd
egg_data <- read.csv("/lab4/eggs_price_2025.csv")
egg_data <- read.csv("lab4/eggs_price_2025.csv")
egg_data <- read.csv("lab4/eggs_price_2025.csv")
egg_data <- read.csv("/lab4/eggs_price_2025.csv")
egg_data <- read.csv("/Lab4/eggs_price_2025.csv")
egg_data <- read.csv("/Lab4/eggs_price_2025.csv")
egg_data <- read.csv("/Lab4/eggs_price_2025.csv")
egg_data <- read.csv("Lab4/eggs_price_2025.csv")
egg_data <- read.csv("lab4/eggs_price_2025.csv")
egg_data <- read.csv("/Users/zp/Desktop/dsan5600/lab4/eggs_price_2025.csv")
colnames(egg_data) <- c("Date", "Price")
plot_ly(egg_data, x = ~as.Date(Date)) %>%
add_lines(y = ~Price, name = 'Egg prices (USD)', line = list(color = 'blue')) %>%
layout(title = "Time series plot in Egg Prices",
xaxis = list(title = "Date"),
yaxis = list(title = "Egg Prices"))
View(egg_data)
f1 <- ggAcf(ts_egg, 50) +
ggtitle("ACF plot without differencing") +
theme_minimal()
ts_egg <- ts(egg_data$Price,
start = decimal_date(as.Date(min(egg_data$Date))),
frequency = 12)  #Monthly dataa
plot(ts_egg, main = "Time Series plot")
f1 <- ggAcf(ts_egg, 50) +
ggtitle("ACF plot without differencing") +
theme_minimal()
f1
tseries::adf.test(ts_egg)
gglagplot(ts_egg, do.lines = FALSE) +
ggtitle("Lag Plot of Original Egg Prices") +
theme_minimal()
require(gridExtra)
plot1<-autoplot(ts_egg, main="without the log transformation")
plot2<-autoplot(log(ts_egg), main="log transformed data")
grid.arrange(plot1, plot2,nrow=2)
tseries::adf.test(ts_egg)
fig1 <- ggAcf(ts_egg, 50) +
ggtitle("ACF of egg's price time series") +
theme_minimal()
fig1
library(patchwork)
install.packages("patchwork")
View(plot1)
library(patchwork)
library(patchwork)
#library(patchwork)
diff <- diff(ts_egg)
fig_diff1 <- ggAcf(diff, 50) +
ggtitle("ACF For differenced egg price") +
theme_minimal() # q = 0, 1, 2
fig_diff2_pacf <- ggPacf(diff, 50) +
ggtitle("PACF For differenced egg price")+
theme_minimal() # p = 0, 1, 2, 3
diff_2 <- diff(diff, lag = 12) # D = 1
fig_diff2_acf <- ggAcf(diff_2, 50) +
ggtitle("ACF for seasonal differencing")+
theme_minimal() # Q = 1 or Q = 0
fig_diff2_pacf <- ggPacf(diff_2, 50) +
ggtitle("PACF for seasonal differencing") +
theme_minimal() # P = 1, 2, 3, 4
(fig_diff1 | fig_diff2_pacf) / (fig_diff2_acf | fig_diff2_pacf)
install.packages("patchwork")
library(patchwork)
#library(patchwork)
diff <- diff(ts_egg)
fig_diff1 <- ggAcf(diff, 50) +
ggtitle("ACF For differenced egg price") +
theme_minimal() # q = 0, 1, 2
fig_diff2_pacf <- ggPacf(diff, 50) +
ggtitle("PACF For differenced egg price")+
theme_minimal() # p = 0, 1, 2, 3
diff_2 <- diff(diff, lag = 12) # D = 1
fig_diff2_acf <- ggAcf(diff_2, 50) +
ggtitle("ACF for seasonal differencing")+
theme_minimal() # Q = 1 or Q = 0
fig_diff2_pacf <- ggPacf(diff_2, 50) +
ggtitle("PACF for seasonal differencing") +
theme_minimal() # P = 1, 2, 3, 4
(fig_diff1 | fig_diff2_pacf) / (fig_diff2_acf | fig_diff2_pacf)
View(fig_diff2_pacf)
#egg_data <- read.csv("eggs_price_2025.csv")
egg_data <- read.csv("/Users/zp/Desktop/dsan5600/lab4/eggs_price_2025.csv")
colnames(egg_data) <- c("Date", "Price")
plot_ly(egg_data, x = ~as.Date(Date)) %>%
add_lines(y = ~Price, name = 'Egg prices (USD)', line = list(color = 'blue')) %>%
layout(title = "Time series plot in Egg Prices",
xaxis = list(title = "Date"),
yaxis = list(title = "Egg Prices"))
#
egg_data <- read.csv("eggs_price_2025.csv")
egg_data <- read.csv("/Users/zp/Desktop/dsan5600/lab4/eggs_price_2025.csv")
colnames(egg_data) <- c("Date", "Price")
plot_ly(egg_data, x = ~as.Date(Date)) %>%
add_lines(y = ~Price, name = 'Egg prices (USD)', line = list(color = 'blue')) %>%
layout(title = "Time series plot in Egg Prices",
xaxis = list(title = "Date"),
yaxis = list(title = "Egg Prices"))
ts_egg <- ts(egg_data$Price,
start = decimal_date(as.Date(min(egg_data$Date))),
frequency = 12)  #Monthly dataa
plot(ts_egg, main = "Time Series plot")
f1 <- ggAcf(ts_egg, 50) +
ggtitle("ACF plot without differencing") +
theme_minimal()
f1
gglagplot(ts_egg, do.lines = FALSE) +
ggtitle("Lag Plot of Original Egg Prices") +
theme_minimal()
require(gridExtra)
plot1<-autoplot(ts_egg, main="without the log transformation")
plot2<-autoplot(log(ts_egg), main="log transformed data")
grid.arrange(plot1, plot2,nrow=2)
fig1 <- ggAcf(ts_egg, 50) +
ggtitle("ACF of egg's price time series") +
theme_minimal()
fig1
library(patchwork)
